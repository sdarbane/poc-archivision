import os
import replicate
import openai
import streamlit as st
from PIL import Image
import requests
from io import BytesIO
import base64

# üîê Cl√©s API (hardcod√©es pour test uniquement)
client = openai.api_key = st.secrets["OPENAI_API_KEY"]
os.environ["REPLICATE_API_TOKEN"] = st.secrets["REPLICATE_API_TOKEN"]
# Streamlit UI
st.set_page_config(page_title="AI Interior Designer", layout="centered")
st.markdown("""
    <style>
    body {
        background-color: #0f0f0f;
        color: white;
    }
    .stButton>button {
        background-color: #444;
        color: white;
        border-radius: 8px;
    }
    </style>
""", unsafe_allow_html=True)

st.title("üè† AI Interior Designer")
st.write("R√©pondez aux questions ci-dessous pour g√©n√©rer une pi√®ce selon vos go√ªts.")

if "prompt_v1" not in st.session_state:
    st.session_state.prompt_v1 = ""
if "prompt_v2" not in st.session_state:
    st.session_state.prompt_v2 = ""

with st.form("user_inputs"):
    piece_type = st.selectbox("Type de pi√®ce", ["Salon", "Chambre", "Cuisine", "Salle de bain", "Bureau", "Salle √† manger", "Hall d'entr√©e", "Dressing", "Toilettes", "Biblioth√®que"])
    style = st.text_input("Style de la pi√®ce", placeholder="Ex : Scandinave, Japandi, Industriel...")
    colors = st.text_input("Couleurs dominantes", placeholder="Ex : bois clair, blanc, beige")
    ambiance = st.text_input("Ambiance souhait√©e", placeholder="Ex : Chaleureuse, lumineuse, calme...")
    mat√©riaux = st.text_input("Mat√©riaux pr√©f√©r√©s (optionnel)", placeholder="Ex : bois, m√©tal, pierre")
    mobilier = st.text_area("Mobilier souhait√© (optionnel)", placeholder="Ex : canap√© d'angle, table basse, √©tag√®res murales...")
    √©clairage = st.text_input("√âclairage (optionnel)", placeholder="Ex : lumi√®re naturelle, suspensions design...")
    √©l√©ments_d√©co = st.text_input("√âl√©ments d√©coratifs (optionnel)", placeholder="Ex : plantes, tableaux, tapis...")
    vue_ext√©rieure = st.text_input("Vue ext√©rieure (optionnel)", placeholder="Ex : grandes baies vitr√©es, jardin, ville...")
    fonction_sp√©ciale = st.text_input("Fonction sp√©ciale de la pi√®ce (optionnel)", placeholder="Ex : coin lecture, espace t√©l√©travail...")
    inspirations = st.text_input("R√©f√©rences ou inspirations (optionnel)", placeholder="Ex : Pinterest, loft new-yorkais...")
    longueur = st.number_input("Longueur de la pi√®ce (m)", min_value=1.0, step=0.1)
    largeur = st.number_input("Largeur de la pi√®ce (m)", min_value=1.0, step=0.1)
    hauteur = st.number_input("Hauteur sous plafond (m)", min_value=2.0, step=0.1)
    contraintes = st.text_input("Contraintes particuli√®res (optionnel)", placeholder="Ex : enfants, animaux, pas de meubles suspendus...")
    submit = st.form_submit_button("G√©n√©rer le prompt")

if submit:
    with st.spinner("G√©n√©ration du prompt avec ChatGPT..."):
        user_prompt = f"""
        Cr√©e une description visuelle r√©aliste et d√©taill√©e d'une pi√®ce de type {piece_type.lower()}.
        Style : {style.lower()}.
        Couleurs dominantes : {colors}.
        Ambiance g√©n√©rale : {ambiance}.
        Mat√©riaux : {mat√©riaux}.
        Mobilier : {mobilier}.
        √âclairage : {√©clairage}.
        √âl√©ments d√©coratifs : {√©l√©ments_d√©co}.
        Vue ext√©rieure : {vue_ext√©rieure}.
        Fonction sp√©ciale : {fonction_sp√©ciale}.
        Inspirations : {inspirations}.
        Contraintes √† respecter : {contraintes}.
        Dimensions de la pi√®ce : longueur {longueur} m, largeur {largeur} m, hauteur sous plafond {hauteur} m.
        Con√ßois une pi√®ce harmonieuse et esth√©tiquement coh√©rente dans ce contexte.
        La description doit √™tre compatible avec une IA de g√©n√©ration d‚Äôimage (type Midjourney), sans mentionner le budget.
        """

        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Tu es un expert en design int√©rieur et tu cr√©es des descriptions r√©alistes de pi√®ces pour des g√©n√©rateurs d'images IA."},
                {"role": "user", "content": user_prompt}
            ]
        )
        prompt = response.choices[0].message.content.strip()
        st.session_state.prompt_v1 = prompt
        st.success("Prompt g√©n√©r√© !")
        st.text_area("Prompt Midjourney-like", prompt, height=180)

    with st.spinner("G√©n√©ration des images avec Replicate..."):
        output_urls = replicate.run(
            "davisbrown/designer-architecture",
            input={"prompt": prompt, "num_outputs": 3}
        )

        images = []
        for url in output_urls:
            response = requests.get(url)
            img = Image.open(BytesIO(response.content))
            images.append(img)

    st.subheader("Choisissez votre image pr√©f√©r√©e")
    cols = st.columns(3)
    selected_index = None

    for i, col in enumerate(cols):
        with col:
            st.image(images[i], caption=f"Image {i+1}", use_column_width=True)
            if st.button(f"Choisir l'image {i+1}"):
                selected_index = i

    if selected_index is not None:
        selected_img = images[selected_index]
        output_path = f"generated_{piece_type.lower()}_{selected_index+1}.png"
        selected_img.save(output_path)
        st.success(f"Image sauvegard√©e sous : {output_path}")
        st.image(selected_img, caption="Image s√©lectionn√©e", use_column_width=True)

        def get_image_download_link(img, filename):
            buffered = BytesIO()
            img.save(buffered, format="PNG")
            img_str = base64.b64encode(buffered.getvalue()).decode()
            href = f"<a href='data:file/png;base64,{img_str}' download='{filename}'>üì• T√©l√©charger l'image</a>"
            return href

        st.markdown(get_image_download_link(selected_img, output_path), unsafe_allow_html=True)

        with st.expander("üîß Ajuster le prompt et r√©g√©n√©rer"):
            adjusted_prompt = st.text_area("Modifiez le prompt si besoin :", st.session_state.prompt_v1, height=180)
            if st.button("üîÑ G√©n√©rer de nouvelles images"):
                with st.spinner("G√©n√©ration d'images alternatives..."):
                    output_urls = replicate.run(
                        "davisbrown/designer-architecture",
                        input={"prompt": adjusted_prompt, "num_outputs": 3}
                    )
                    images = []
                    for url in output_urls:
                        response = requests.get(url)
                        img = Image.open(BytesIO(response.content))
                        images.append(img)

                st.session_state.prompt_v2 = adjusted_prompt
                st.subheader("Nouvelles propositions")
                for i, img in enumerate(images):
                    st.image(img, caption=f"Image {i+1} (ajust√©e)", use_column_width=True)
